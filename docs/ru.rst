=========
Class Str
=========

Класс для работы со строками.

------------


filter
------

Описание
    ::

        string filter ( string $string [, int $options = Str::FILTER_TEXT ] )

    Фильтрует специальные символы в строке в кодировке UTF-8.
    К специальным символам относятся все символы, за исключением основной латиницы (20-7F),
    части кириллицы (400-45F), символов табуляции (09) и перевода строки (0A).

Список параметров
    :$string: Фильтруемая строка.
    :$options:
        Принимает одно или сумму из следующих значений:

        - **Str::FILTER_TEXT** - (по умолчанию) удаляет все специальные символы.
        - **Str::FILTER_HTML** - удаляет все непечатные базовые символы, замещает все специальные символы на их html-сущности.
        - **Str::FILTER_CODE** - замещает все специальные символы на их шестнадцатеричный код в формате ``[%0000]``. Используется для отладки.
        - **Str::FILTER_PUNCTUATION** - заменяет все возможные виды дефисов/тире и кавычек на ``-`` (2D) и ``"`` (22) соответсвтенно.
        - **Str::FILTER_SPACE** - заменяет все последовательности пробельных символов на пробел (x20).

        Фильтры Str::FILTER_TEXT и Str::FILTER_HTML можно комбинировать с фильтрами Str::FILTER_PUNCTUATION и Str::FILTER_SPACE.

Возвращаемые значения
    Отфильтрованная строка.

Расширяемость
    Статическое свойство класса **$filterCodeFormat** равно ``[%%%'04X]``
    и отвечает за формат вывода специальных символов с опцией Str::FILTER_CODE.
    Его можно переопределить на любой другой формат, совместимый с `sprintf <http://php.net/sprintf>`_.


slugify
-------

Описание
    ::

        string slugify ( string $string [, string $characters = null [, string $placeholder = null ] ] )

    Транслитерирует строку и заменяет специальные символы на **$placeholder**.

Список параметров
    :$string: Фильтруемая строка.
    :$characters: Дополнительный список символов, которые не будут заменены. По умолчанию пуст.
    :$placeholder: Символ, на который заменяются все специальные символы. По умолчанию знак ``_`` (2D).

Возвращаемые значения
    Отфильтрованная строка.

Расширяемость
    По умолчанию транслитерация происходит только для букв русского алфавита.
    Изменить схему замены или добавить новые траслитерируемые символы можно переопределив
    статическое свойство **$slugifyTransliteration**.
    Изменить placeholder можно переопределив статическое свойство **$slugifyPlaceholder**.


getRandomString
---------------

Описание
    ::

        string getRandomString ( [ int $length = 32 [, string $characters = 'qwertyuiopasdfghjklzxcvbnm0123456789' ] ] )

    Генерирует псевдослучайную строку.
    Для генерации используется функция `random_int <https://php.net/random_int>`_.

Список параметров
    :$length: Длина строки. По умолчанию 32.
    :$characters:
        Список символов, из которых будет состоять строка.
        По умолчанию символы латинского алфавита в нижнем регистре и цифры.

Возвращаемые значения
    Псевдослучайная строка.


isUrl
-----

Описание
    ::

        bool isUrl ( string $url [, bool $requiredScheme = false ] )

    Проверяет действительно ли переданная строка является URL.

Список параметров
    :$url: Строка, которую необходимо проверить.
    :$requiredScheme: Флаг, включающий обязательное наличие указания протокола. По умолчанию ``false``.

Возвращаемые значения
    Возвращает ``true``, если переданная строка является URL. В противном случае - ``false``.


isEmail
-------

Описание
    ::

        bool isEmail ( string $email )

    Проверяет действительно ли переданная строка является email-адресом.

Список параметров
    :$email: Строка, которую необходимо проверить.

Возвращаемые значения
    Возвращает ``true``, если переданная строка является email-адресом. В противном случае - ``false``.

Расширяемость
    За основу взято регулярное выражение, используемое в Yii 2.
    Его можно изменить переопределив статическое свойство **$emailPattern**.


pad
---

Описание
    ::

        string pad ( string $input, int $length [, string $string = ' ' [, int $type = STR_PAD_RIGHT ]] )

    Эта функция возвращает строку **$input**, дополненную слева, справа или с обеих сторон до заданной длины.
    Если необязательный аргумент **$string** не передан, то **$input** будет дополнен пробелами,
    иначе он будет дополнен символами из **$string** до нужной длины.
    Аналог функции `str_pad <https://php.net/str_pad>`_ для UTF-8.

Список параметров
    :$input: Входная строка.
    :$length:
        Если значение **$length** отрицательно, меньше или равно длине входной строки,
        то дополнения не происходит и возвращается исходная строка **$input**.
    :$string: Символ, которым будет заполнена недостающая длинна.
    :$type:
        Необязательный аргумент **$type** может иметь значение ``STR_PAD_RIGHT``, ``STR_PAD_LEFT`` или ``STR_PAD_BOTH``.
        Если не указан, то по умолчанию используется ``STR_PAD_RIGHT``.

Возвращаемые значения
    Возвращает дополненную строку.


convertCase
-----------

Описание
    ::

        string convertCase ( string $string , int $convention )

    Перевод строки в соответствии с заданным `стандартом <https://en.wikipedia.org/wiki/Naming_convention_(programming)>`_.

Список параметров
    :$string: Строка для конвертации.
    :$convention:
        Соглашение, на основе которого будет происходить конвертация.
        Принимает одно из следующих значений:

        - **Str::CASE_CAMEL_LOWER** - `lower camel case <https://en.wikipedia.org/wiki/Camel_case>`_.
        - **Str::CASE_CAMEL_UPPER** - upper camel case (pascal case).
        - **Str::CASE_SNAKE_LOWER** - `snake case <https://en.wikipedia.org/wiki/Snake_case>`_.
        - **Str::CASE_SNAKE_UPPER** - screaming snake case.
        - **Str::CASE_KEBAB_LOWER** - `kebab case <https://en.wikipedia.org/wiki/Letter_case#Special_case_styles>`_ (lisp case).
        - **Str::CASE_KEBAB_UPPER** - upper kebab case.

Возвращаемые значения
    Сконвертированная строка.


getShortClassName
-----------------

Описание
    ::

        string getShortClassName ( object $object )

    Возвращает название класса для объекта без namespace.

Список параметров
    :$object: Произвольный объект.

Возвращаемые значения
    Возвращает название класса.


interpolate
-----------

Описание
    ::

        string interpolate ( string $template, array $context )

    Вставляет слова в шаблон из переданного массива.

Список параметров
    :$template: Строка, с заранее подготовленными местами для вставки.
    :$context: Массив слов, которые будут вставляться на основе ключа.

Возвращаемые значения
    Возвращает заполненный шаблон.

Расширяемость
    По умолчанию в шаблоне будут заменяться строки вида ``{array_key}``.
    Вид можно изменить переопределив статическое свойство **$interpolatePattern**.


intToRoman
----------

Описание
    ::

        string intToRoman ( int $number )

    Конвертирует арабские цифры в римские.

Список параметров
    :$number: Число от 0 до 4999.

Возвращаемые значения
    Число, записанное римскими цифрами.
